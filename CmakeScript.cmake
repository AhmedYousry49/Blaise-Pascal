# Define the configuration header file path 
# (put it in build directory because it is autogenerated and does not have to be pushed to Github)
set(OUTPUT_FILE ${CMAKE_BINARY_DIR}/config.h)

# Find the Python script and throw an error if it was not found
message(STATUS "Current source directory: ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "Looking for generate_config.py in: ${CMAKE_CURRENT_SOURCE_DIR}/..")
find_program(CONFIG_SCRIPT NAMES generate_config.py 
    PATHS 
        ${CMAKE_CURRENT_SOURCE_DIR} # Current directory
        ${CMAKE_CURRENT_SOURCE_DIR}/.. # Parent directory
        ${CMAKE_CURRENT_SOURCE_DIR}/../.. # Grandparent directory
    REQUIRED)
if (CONFIG_SCRIPT)
    message(STATUS "Found generate_config.py at: ${CONFIG_SCRIPT}")
else()
    message(FATAL_ERROR "generate_config.py not found. Ensure it exists in one of the expected locations.")
endif()

# Make sure Python3 is present and throw an error if it was not found
find_package(Python3 REQUIRED)

# Macro to configure features by passing the right input to generate_config.py
macro(configFeature MODULE INPUT)

    # Generate a unique name for the custom target
    set(TARGET_NAME "${MODULE}_Target")

    # Check if the custom target already exists to avoid conflicts
    if (NOT TARGET ${TARGET_NAME})
        # Add the custom command to generate the config.h file
        add_custom_command(
            OUTPUT ${OUTPUT_FILE}  # Specify the output file (config.h)
            COMMAND ${CMAKE_COMMAND} -E env python3 ${CONFIG_SCRIPT} ${INPUT}  # Run the Python script with the passed argument
            COMMENT "Generating or updating ${OUTPUT_FILE} using ${CONFIG_SCRIPT} with input=${INPUT}" # Print this when the command is executed
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR} # This specifies the folder the script will be executed in (in build to put config.h there)
            VERBATIM # Take every command literally and do not overcook
        )

        # Create a unique custom target for this module
        add_custom_target(
            ${TARGET_NAME}      # Custom target name is unique
            DEPENDS ${OUTPUT_FILE}  # Make sure the target depends on the generated config.h
        )
    endif()

    # Ensure that the module library depends on its custom target
    add_dependencies(${MODULE} ${TARGET_NAME})

endmacro()
